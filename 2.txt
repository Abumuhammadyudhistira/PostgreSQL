1. AS (alias)
	# AS clause for making alias for column or result
	SELECT amount AS rental_price # for column
	FROM payment
	
	# naming aggregate function 
	SELECT SUM(amount) AS net_revenue
	FROM payment

	# no alias inside WHERE/HAVING
	SELECT customer_id, SUM(amount) AS total_spent
	FROM payment
	GROUP BY customer_id
	HAVING total_spent > 100 # it won't work! change total_spent to SUM(amount)


2. INNER JOIN
	# JOIN allow us to combine information from multiple tables
	# it is designed to solve how to deal with information only present in
	# one of the joined tables
	# INNER JOIN will result with records match in both tables
	# JOIN = INNER JOIN
	
	# you should include name of table with column
	# to specify which column you mean
	SELECT payment_id, payment.customer_id, first_name 
	FROM payment
	INNER JOIN customer 
	ON payment.customer_id = customer.customer_id # column match
	# table after FROM will be ordered first


3. OUTER JOIN
	# allow us to specify how to deal with values only present in one of the 
	# table being joined
	# full join
	SELECT * FROM customer
	FULL OUTER JOIN payment
	ON customer.customer_id = payment.customer_id
	
	# full join with where/ no INNER JOIN
	SELECT * FROM customer
	FULL OUTER JOIN payment
	ON customer.customer_id = payment.customer_id
	WHERE customer.customer_id IS NULL # check only data unique for customer table
	OR payment.payment_id IS NULL # check only data unique for payment table
	

4. LEFT OUTER JOIN
	# order matters for left outer join
	SELECT film.film_id, title, inventory_id, store_id 
	FROM film
	LEFT OUTER JOIN inventory
	ON inventory.film_id = film.film_id	

	# we want entries unique to film table 
	# means found in film table but not found in inventory table
	SELECT film.film_id, title, inventory_id, store_id 
	FROM film
	LEFT OUTER JOIN inventory
	ON inventory.film_id = film.film_id # column match
	WHERE inventory.film_id IS NULL # column_id
					# film that unique in film table
					# film cannot be found in inventory table

	
5. RIGHT OUTER JOIN
	# table switched for LEFT OUTER JOIN
	# we want entries unique to inventory table means found in inventory table
	# and not found in film table
	SELECT film.film_id, title, inventory_id, store_id 
	FROM film
	RIGHT OUTER JOIN inventory
	ON inventory.film_id = film.film_id # column match
	WHERE film.film_id IS NULL 	# column_id
					# film that unique in inventory table
					# film cannot be found in film table

	
6. UNION
	# combine result set of two or more SELECT statement
	# concatenate => paste table_B below table_A
	SELECT * FROM table_A
	UNION
	SELECT * FROM table_B


7. JOIN challenge
	# what are the emails of the customers who live in California
	SELECT district, email FROM customer
	INNER JOIN address
	ON customer.address_id = address.address_id
	WHERE district = 'California # ordinary WHERE

	# get a list of all movies "Nick Wahlberg" has been in
	SELECT title, first_name, last_name FROM actor
	INNER JOIN film_actor
	ON actor.actor_id = film_actor.actor_id
	WHERE first_name = 'Nick' AND last_name = 'Wahlberg'


8. TIMESTAMP
	# postgreSQL can hold date and time information
	# TIME DATE TIMESTAMP TIMSESTAMPTZ
	# TIMEZONE NOW TIMEOFDAY CURRENT_TIME CURRENT_DATE
	
	SHOW ALL # show syntax
	SHOW TIMEZONE # show time
	SHOW NOW() # get now timestamp
	SELECT TIMEOFDAY()
	SELECT CURRENT_TIME
	SELECT CURRENT_DATE

	# extracting information from a time based data type
	SELECT EXTRACT(YEAR FROM payment_date) AS year
	FROM payment

	# calculate age
	SELECT AGE(payment_date) # AGE of payment
	FROM payment

	# convert data types to text
	SELECT TO_CHAR(payment_date, 'MONTH YYYY') # the format can be found on data type
	FROM payment
	
	# during which month did payments occur
	SELECT DISTINCT(TO_CHAR(payment_date,'MONTH'))
	FROM payment
	
	# how many payment occured on a monday
	SELECT COUNT(*)
	FROM payment
	WHERE EXTRACT(dow FROM payment_date)=1 # can be in WHERE
	
	SELECT
	COUNT(*)
	FROM payment
	WHERE TO_CHAR(payment_date,'DAY') ILIKE '%monday%'


9. MATHEMATICAL FUNCTIONS
	# + - * / % ^ |/ |// ! !! @ & | 

	SELECT ROUND((rental_rate/replacement_cost)*100,2) AS percent_pay
	FROM film

	
10. STRING FUNCTIONS
	# edit, combine, and alter string data
	string || string #concatenate string
	string || non-string 
	bit_length(string) # number of bits in string
	char_length(string) # number of char in string
	LENGTH()
	lower(string) # convert to lowercase
	octet_length()

	# concatenate first_name and last_name
	SELECT upper(first_name)||' '||upper(last_name) AS full_name
	FROM customer
	
	# making email address
	SELECT LOWER(LEFT(first_name,1)) || lower(last_name) || '@gmail.com' 
	As email_address
	FROM customer
	

11. SUBQUERY
	# two step query
	# WHERE EXISTS(SUBQUERY)
	# WHERE column IN (SUBQUERY)
	
	# title, rental_rate which is higher than the average
	SELECT title, rental_rate FROM film
	WHERE rental_rate > (SELECT AVG(rental_rate) FROM film)

	# film title in the inventory which was being rented between certain time
	SELECT film_id, title FROM film
	WHERE film_id IN
	(SELECT inventory.film_id
	FROM rental INNER JOIN inventory ON rental.inventory_id = inventory.iniventory_id
	WHERE return_date BETWEEN '2005-05-29' AND '2005-05-30') # no more hours after
	ORDER BY film_id
	
	# customer where exist in payment and ever pay above 11
	SELECT first_name, last_name FROM customer AS c
	WHERE EXISTS(
	SELECT * FROM payment AS p
	WHERE c.customer_id=p.customer_id AND amount>11)


12. SELF JOIN
	# query in which a table isjoined to itself
	# make sure you underline the alias
	
	# find the title in film table which has the same length
	# with the title in the film table itself 
	SELECT f1.title, f2.title, f1.length
	FROM film AS f1
	INNER JOIN film AS f2 ON
	f1.film_id != f2.film_id
	AND f1.length = f2.length # we have to make sure one match up column
	

13. ASSESSMENT TEST 2
	# for database who have 2 or more schema spell schema.column after FROM
	SELECT * FROM cd.facilities
	
	# retrieve all data from cd.facilities
	SELECT * FROM cd.facilities
	
	# retrieve name and member cost 
	SELECT name, membercost FROM cd.facilities
	
	# how can you produce facilities that charge a fee to members
	SELECT * FROM cd.facilities
	WHERE membercost>0
	ORDER BY facid ASC
	LIMIT 5
	
	# how can you produce a list of facilities that charge a fee
	# and that is less than 1/50th of the monthly maintenance cost
	SELECT facid, name, membercost, monthlymaintenance
	FROM cd.facilities
	WHERE membercost > 0 AND
	membercost < (monthlymaintenance/50)
	ORDER BY facid
	
	# how ca you produce a list of all facilities with the word 'TENNIS'
	SELECT * FROM cd.facilities
	WHERE name ILIKE '%tennis%'

	# how can you retrieve details of the facilities with ID 1 and 5
	SELECT * FROM cd.facilities
	WHERE facid in (1,5)
	
	# how can you produce a list of members who joined after the start of September 12
	SELECT memid, surname, firstname, joindate
	FROM cd.members
	WHERE joindate >= '2012-09-01'
	LIMIT 8
	
	# how can you produce an ordered list of the first 10 surnames in the members table
	# no duplicate
	SELECT DISTINCT surname FROM cd.members
	ORDER BY surname
	LIMIT 10
	
	# you'd like to get the signup date of your last member
	SELECT joindate FROM cd.members
	ORDER BY joindate DESC
	LIMIT 1
	
	# produce a count of the number of the facilities that have a cost to guests
	# of 10 or more
	SELECT COUNT(*) FROM cd.facilities
	WHERE guestcost >= 10
	
	# produce a list of the total number of slots booked per facility in the 
	# month of September 2012
	SELECT facid, SUM(slots) AS TotalSlots
	FROM cd.bookings
	WHERE starttime BETWEEN '2012-09-01' AND '2012-10-01'
	GROUP BY facid 
	
	# produce a list of facilities with more than 1000 slots booked
	SELECT facid, SUM(slots) FROM cd.bookings
	GROUP BY facid
	HAVING SUM(slots) > 1000
	ORDER BY facid
	
	# how can you produce a list of the start times for bookings for tennis 
	# courts for the date '2012-09-21'
	SELECT starttime as start, name FROM cd.bookings
	JOIN cd.facilities
	ON cd.bookings.facid = cd.facilities.facid
	WHERE name ILIKE 'tennis%' 
	AND starttime BETWEEN '2012-09-21' AND '2012-10-22'
	ORDER BY starttime
	LIMIT 12
	
	# how can you produce a list of the start time for bookings 
	# by members named 'David Farrell'
	SELECT firstname,surname,starttime FROM cd.bookings
	JOIN cd.members ON cd.bookings.memid = cd.members.memid
	WHERE firstname ILIKE 'David' AND surname ILIKE 'Farrell'
	
	
	
	
	
	
	
	
	
	




